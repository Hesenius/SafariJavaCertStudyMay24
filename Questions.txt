Q)
Which are legal:
A) var [] x = { 1,2,3 };
B) var x = new int[]{ 1,2,3 };
C) var x = 10, y = 100;
D) var x = true ? "99" : 99;
E) var var = "var";

Q) Given:
    String message = """
        Hello
            Java 17 World!""";
    System.out.println(message + "XXX");

What is the result?
A)
Hello
Java 17 World!XXX

B)
Hello
    Java 17 World!XXX

C)
Hello
Java 17 World!
XXX

D)
    Hello
        Java 17 World!
XXX

Q)
Given, separately compiled:
class X {
  static String h = "Hel" + "lo";
}

Which are true?
  String s1 = "Hello";
  String s2 = new StringBuilder("Hello").toString();
  String s3 = s2.intern();

A) s1 == s2
B) s2 == s3
C) s1 == s3
D) X.h == s1
E) None of the above

Q) Given
int x = -1;
int y = 0b0000_0000_0000_1010; // line n1
System.out.println(x | y); // line n2

What is the result?
A) Compilation fails at line n1
B) Compilation fails at line n2
C) 10
D) 0b1111_1111_1111_1111
E) -1
F) Exception at runtime

Q) Given:
  public static boolean v1() {
    return true;
  }

  public static boolean v2() {
    throw new RuntimeException();
  }

and:
      System.out.println(v1() || v2());

What is the result:
A) Compilation fails
B) Exception
C) true
D) false
E) true, followed by an exception

Q) Given:

    String s = "Hello";
    System.out.println(s instanceof String x);

What is the result?
A) true
B) false
C) Exception at runtime
D) Compilation fails

Q) Given:
  class Base {
    void doBaseStuff() { System.out.println("doBaseStuff"); }
  }

and:
  class Sub extends Base {
    void doBaseStuff() { System.out.println("doSubStuff"); }
    void doOtherStuff() { System.out.println("doOtherStuff"); }
  }

and:
    Base b = new Sub();
    ((Runnable) b).run();

What is the result?
  A) doSubStuff
  B) doOtherStuff
  C) doBaseStuff
  D) Exception at runtime
  E) Compilation failure

Q) Given:
    Object obj = "Hello";
    boolean answered = false;
    if (obj instanceof String) {
      String str = (String)obj;
      if (str.length() > 3) {
        System.out.println(str);
        answered = true;
      }
    }
    if (!answered) System.out.println("Nope");

Which replace the if /instanceof clause to produce the same output?
A)    System.out.println(obj instanceof String str && str.length() > 3 ? str : "Nope");
B)    if (obj instanceof String str when str.length() > 3) System.out.println(str);
      else System.out.println("Nope");
C)    if (obj instanceof String str if str.length() > 3) System.out.println(str);
      else System.out.println("Nope");
D)    System.out.println(obj instanceof String.class str && str.length() > 3 ? str : "Nope");
E)    if (!(obj instanceof String str) || str.length() <= 3) System.out.println("Nope");
      else System.out.println(str);

Q) Which print true?
Iterable<String> is = List.of("a", "b", "c");
Object obj = is;

  A) System.out.println(is instanceof List);
  B) System.out.println(obj instanceof List l && l.size() > 2);
  C) System.out.println(obj instanceof List<String> ls);
  D) System.out.println(is instanceof Collection<? extends CharSequence> cs);
  E) System.out.println(is instanceof List<String> ls || ls.size() > 2);

Q) Given:
    String s = "Hello";
    switch (s) {
      case "Hello" ->
          System.out.print("Bonjour "); // line n1
          System.out.print("Guten Tag ");
      default -> System.out.print("Bye");
    }

Which is true?
A) The code prints: Bonjour Guten Tag Bye
B) The code prints: Bonjour Guten Tag
C) If line n1 is removed the code prints: Guten Tag Bye
D) If line n1 is removed the code prints: Guten Tag
E) The code fails to compile

Q) Given:
    short s = 8;
    System.out.println(switch (s) { // line n1
      // line n2
      default -> "It's something else"; // line n3
    });


Which are true?
A) Compilation fails at line n1
B) Compilation fails at line n3
C) The code runs and prints It's something else
D) Adding at line n2
   case 2,4,6,8 -> "Even < 10";
   gives the output Even < 10
E) Adding at line n2
   case 2 -> case 4 -> case 6 -> case 8 -> "Even < 10";
   gives the output Even < 10

Q) Given:
  void doStuff(int x, int y) {}         // Method A
  void doStuff(int x, long y) {}        // Method B
  void doStuff(long x, int y) {}        // Method C
  void doStuff(int ... x) {}            // Method D
  void doStuff(Integer x, Integer y) {} // Method E

  void tryStuff() {
    doStuff(1, 2);
  }

Q) Given
  class Parent {
    static int x = 97;
  }
  class Thing extends Parent {
    int x = 99;

    static void showIt() {
      int x = 98;
      System.out.println("x is " + Thing.x);
    }
  }

What is the effect of:
Thing.showIt();

  A) Compilation fails
  B) Exception
  C) x is 99
  D) x is 98
  E) x is 97

Q) Given:
  class Base {
    void doBaseStuff() { System.out.println("doBaseStuff"); }
  }

  class Sub extends Base {
    void doBaseStuff() { System.out.println("doSubStuff"); }
  }

In the Base and Sub classes, which are true in isolation?

A) doBaseStuff in Base can be marked throws Exception without causing errors
B) doBaseStuff in Base can be marked throws RuntimeException without causing errors
C) doBaseStuff in Sub can be marked throws Exception without causing errors
D) doBaseStuff in Sub can be marked throws RuntimeException without causing errors
E) if doBaseStuff in Base were marked throws Exception,
   then doBaseStuff in Sub can be marked throws IOException without causing errors

Q)
Given:
enum Suit { HEARTS, DIAMONDS, CLUBS, SPADES;
  boolean isTrumps() { return this == HEARTS; }
}

Which is/are true?
A) isTrumps is implicitly static
B) isTrumps can be marked final
C) if it's necessary to prevent isTrumps being overridden,
   it should be marked final
D) isTrumps fails to compile
E) none of the above

Q) Given:
class OuterP {
  class InnerP1 {
    private void doStuff() {
      System.out.println("InnerP1.doStuff()");
    }
  }
  class InnerP2 extends InnerP1 {
    public void doStuff() {
      System.out.println("InnerP2.doStuff()");
    }
  }
  public static void main(String[] args) {
    OuterP.InnerP1 op = new OuterP().new InnerP2();
    op.doStuff();
  }
}

What is the result?
A) Does not compile
B) Exception at runtime
C) InnerP1.doStuff()
D) InnerP2.doStuff()

Q) Given
class Outer {
  class Inner{
  }
}
Which create an instance of Inner?
A) new Inner();
B) new Outer.Inner();
C) Outer ou = new Outer(); new ou.Inner();
D) new Outer().new Inner();
E) new Outer() { new Inner(); }

Q) Given:
  record Client(String name, int creditLimit) {
    // line n1
  }

Which can be added?
A) At line n1
   public Client(String name) { this(name, 0); }

B) at line n1
   public Client(String name, int creditLimit) {
     super();
     this.name = name;
     this.creditLimit = creditLimit;
   }

C) as a separate declaration:
   record SpecialClient(String name, int creditLimit, String greeting)
     extends Client(name, creditLimit) {}

D) at line n1
   private Client() { this("Unknown", 0); }

E) at line n1: Client {}

Q) Given:
class X {
  public int getValue() { return 1; }
  public CharSequence get() { return "x"; }
}

Which of these methods may individually be added to a subclass of X?

A) public long getValue() { return 10; }
B) public String getValue() {return "Hello";}
C) public String getValue(int x) {return "Hello";}
D) public short getValue() { return 10; }
E) public long get() { return 1;}
F) public String get() { return "X"; }
G) public Object get() { return new Object(); }
H) public CharSequence get() { return new StringBuilder("x"); }

Q) Given:
public void doStuff() {
  int len = 3;
  Predicate<String> ps = new Predicate<String>() {
    @Override
    public boolean test(String s) {
      return s.length() > len; // line n1
    }
  };
  // line n2
}

Which are true?
A) The code compiles
B) Compilation fails due to a problem at line n1
C) adding the code
   System.out.println("testing lines " + (++len));
   at line n2 is OK

Q) Given:
interface Int1 {
  default void doStuff() {
    System.out.println("Int1.doStuff()");
  }
}
class Cl1 implements Int1 {
  void doStuff() {
    System.out.println("Cl1.doStuff");
  }
}

What is the result of a call:
new Cl1().doStuff();

A) Compilation fails
B) RuntimeException
C) Int1.doStuff()
D) Cl1.doStuff()
E) Int1.doStuff()
   Cl1.doStuff()

Q) Given:
interface IntA {
  default void doStuff() {
    System.out.println("IntA.doStuff()");
  }
}
interface IntB {
  default void doStuff() {
    System.out.println("IntB.doStuff()");
  }
}
class ClA implements IntA, IntB {
  public void doStuff() {
    System.out.println("ClA.doStuff");
  }
}
What is the result of a call:
   new ClA().doStuff();
A) Compilation fails
B) RuntimeException
C) IntA.doStuff()
D) IntB.doStuff()
E) ClA.doStuff()

Q) Given:
interface IntA {
  default void doStuff() {
    System.out.println("IntA.doStuff()");
  }
}
interface IntB {
  default void doStuff() {
    System.out.println("IntB.doStuff()");
  }
}
class ClA implements IntA, IntB {
}
What is the result of a call:
   new ClA().doStuff();

A) Compilation fails
B) RuntimeException
C) IntA.doStuff()
D) IntB.doStuff()
E) ClA.doStuff()

Q) Given
class Parent {
  Parent(int x) { y += x; out.print(", P-c: y is " + y); }
  static { out.print(", P-si: x is " + Parent.x); }
  static int x = 99;
  int y = 100;
  { y++; out.print(", P-i: y is " + y); }
}
class Child extends Parent {
  int x = 200;
  static int y = 300;
  Child() { super(y); }
  Child(int x) { this(); }
  { out.print(", C-i x: is " + x); }
  static { out.print(", C-si: y is " + y); }
}
class InitOrder3 {
  public static void main(String[] args) {
    out.print("Hello!");
    new Child(-1);
    out.println(" Goodbye!");
  }
}
What is the result?
A) Compilation fails
B) Exception at runtime
C) Hello!, P-si: x is 0, C-si: y is 300, P-i: y is 101, P-c: y is 401, C-i x: is 200 Goodbye!
D) , P-si: x is 0, C-si: y is 300Hello!, P-i: y is 101, P-c: y is 401, C-i x: is 200 Goodbye!
E) Hello!, P-si: x is 99, C-si: y is 300, P-i: y is 101, P-c: y is 100Goodbye!

Q) Given:
      ???? (s, t) -> s.length() - t.length();

Which are correct inserted in place of ????
A) BiFunction<String, String, Integer> f =
B) BiPredicate<String> f =
C) Comparator<String> f =
D) Supplier<String, Integer> f =
E) BinaryOperator<String> f =
F) var f =

Q) Given, in a single file X.java:
interface ArbInter {}
final class Y implements X {}
sealed interface X /* point x */{}
// line n1

Which is/are true?
A) the code compiles as it stands
B) the code compiles if the following is added at point x
   permits Y, Z
   AND this is added at line n1
   class Z implements X {}
C) the code compiles if the following is added at point x
   permits Y, Z
   AND this is added at line n1
   record Z(String name) implements X {}
D) the code compiles if the following is added at point x
   permits Y extends ArbInter
E) the code compiles if the following is added at line n1
   non-sealed abstract class Z implements X permits Q {}
   final class Q extends Z {}

Q) Given:
class Name { // line n1
  protected String first, last; // line n2
  // line n3
  public Name(String first, String last) {
    this.first = first;
    this.last = last;
  }
  public String toString() {
    return "[first=" + first + ", last=" + last + "]";
  }
}
class Person extends Name implements Serializable {
  private String address;
  public Person(String fName, String lName, String address) {
    super(fName, lName);
    this.address = address;
  }
  public String toString() {
    return "Person{" + "name=" + first + ", " + last + ", address=" + address + '}';
  }
}
and:
    ByteArrayOutputStream baos = new ByteArrayOutputStream(1024);
    ObjectOutputStream oos = new ObjectOutputStream(baos);
    Person p = new Person("Algernon", "Montgomery", "In the hangar");
    oos.writeObject(p);
    ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
    ObjectInputStream ois = new ObjectInputStream(bais);
    Object obj = ois.readObject();
    System.out.println(obj);
Which are true?
A) The code compiles but throws an exception at runtime
B) A change at line n1 is sufficient to allow successful execution
C) A change at line n2 is sufficient to allow successful execution
D) A change at line n3 is sufficient to allow successful execution

Q) Given, rooted on the base of the classpath:
---file: localization/MyResources.properties
name=Fred
-----------------------------------------------
---file: localization/MyResources_de.properties
name=Helmut
-----------------------------------------------
and:

    Locale.setDefault(Locale.FRENCH);
    ResourceBundle bundle = PropertyResourceBundle.getBundle(
        "MyResources");
    System.out.println("Name is " + bundle.getString("name"));

What is the result?
A) Name is Helmut
B) Name is Fred
C) Name is null
D) an exception is thrown
E) compilation fails

Q) Given:
  public static void main(String[] args) {
    StringBuilder sb1 = new StringBuilder("Hello");
    StringBuilder sb2 = sb1;
    sb1 = null;
    // here
    System.out.println("Not here.");
  }

  Which is true at point "here"?
  A) sb1 is unreferenced and eligible for GC
  B) sb1 and sb2 are unreferenced and eligible for GC
  C) No objects are eligible for GC

Q) Given:
  static int doStuff(String s) {
    s = new String("Hello");
    return s.length();
  }

  public static void main(String[] args) {
    int y = doStuff("Hello");
    // line n1
  }
how many String objects are eligible for GC at line n1
A) 0
B) 1
C) 2
D) 3

Q) Given:
  static String doStuff(String s) {
    s = new String("Hello");
    return s;
  }

  public static void main(String[] args) {
    String y = doStuff("Hello");
    // line n1
    System.out.println("y is " + y);
  }
 how many String objects are eligible for GC at line n1
A) 0
B) 1
C) 2
D) 3

